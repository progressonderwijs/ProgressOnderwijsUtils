//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FilterLanguage.g4 by ANTLR 4.5.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ProgressOnderwijsUtils.FilterLanguage {
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.2")]
[System.CLSCompliant(false)]
public partial class FilterLanguageLexer : Lexer {
	public const int
		AndOp=1, OrOp=2, LessThan=3, LessThanOrEqual=4, Equal=5, GreaterThanOrEqual=6, 
		GreaterThan=7, NotEqual=8, StartsWith=9, EndsWith=10, Contains=11, In=12, 
		NotIn=13, HasFlag=14, IsNull=15, IsNotNull=16, ColumnName=17, Number=18, 
		LP=19, RP=20, WS=21;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"AndOp", "OrOp", "LessThan", "LessThanOrEqual", "Equal", "GreaterThanOrEqual", 
		"GreaterThan", "NotEqual", "StartsWith", "EndsWith", "Contains", "In", 
		"NotIn", "HasFlag", "IsNull", "IsNotNull", "ColumnName", "Number", "LP", 
		"RP", "WS"
	};


	public FilterLanguageLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'and'", "'or'", "'<'", "'<='", "'='", "'>='", "'>'", "'!='", "'starts with'", 
		"'ends with'", "'contains'", "'in'", "'not in'", "'has flag'", "'is null'", 
		"'is not null'", null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "AndOp", "OrOp", "LessThan", "LessThanOrEqual", "Equal", "GreaterThanOrEqual", 
		"GreaterThan", "NotEqual", "StartsWith", "EndsWith", "Contains", "In", 
		"NotIn", "HasFlag", "IsNull", "IsNotNull", "ColumnName", "Number", "LP", 
		"RP", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FilterLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x17");
		sb.Append("\xA8\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6");
		sb.Append("\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f");
		sb.Append("\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4");
		sb.Append("\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16");
		sb.Append("\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5");
		sb.Append("\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t");
		sb.Append("\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n");
		sb.Append("\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f");
		sb.Append("\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE");
		sb.Append("\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF");
		sb.Append("\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3");
		sb.Append("\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11");
		sb.Append("\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3");
		sb.Append("\x12\a\x12\x8C\n\x12\f\x12\xE\x12\x8F\v\x12\x3\x13\x6\x13\x92");
		sb.Append("\n\x13\r\x13\xE\x13\x93\x3\x13\x3\x13\x6\x13\x98\n\x13\r\x13");
		sb.Append("\xE\x13\x99\x5\x13\x9C\n\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3");
		sb.Append("\x16\x6\x16\xA3\n\x16\r\x16\xE\x16\xA4\x3\x16\x3\x16\x2\x2\x17");
		sb.Append("\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r");
		sb.Append("\x19\xE\x1B\xF\x1D\x10\x1F\x11!\x12#\x13%\x14\'\x15)\x16+\x17");
		sb.Append("\x3\x2\x6\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61");
		sb.Append("\x63|\x3\x2\x32;\x5\x2\v\f\xF\xF\"\"\xAC\x2\x3\x3\x2\x2\x2\x2");
		sb.Append("\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2");
		sb.Append("\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2");
		sb.Append("\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2");
		sb.Append("\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F");
		sb.Append("\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2");
		sb.Append("\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x3-\x3\x2");
		sb.Append("\x2\x2\x5\x31\x3\x2\x2\x2\a\x34\x3\x2\x2\x2\t\x36\x3\x2\x2\x2");
		sb.Append("\v\x39\x3\x2\x2\x2\r;\x3\x2\x2\x2\xF>\x3\x2\x2\x2\x11@\x3\x2");
		sb.Append("\x2\x2\x13\x43\x3\x2\x2\x2\x15O\x3\x2\x2\x2\x17Y\x3\x2\x2\x2");
		sb.Append("\x19\x62\x3\x2\x2\x2\x1B\x65\x3\x2\x2\x2\x1Dl\x3\x2\x2\x2\x1F");
		sb.Append("u\x3\x2\x2\x2!}\x3\x2\x2\x2#\x89\x3\x2\x2\x2%\x91\x3\x2\x2\x2");
		sb.Append("\'\x9D\x3\x2\x2\x2)\x9F\x3\x2\x2\x2+\xA2\x3\x2\x2\x2-.\a\x63");
		sb.Append("\x2\x2./\ap\x2\x2/\x30\a\x66\x2\x2\x30\x4\x3\x2\x2\x2\x31\x32");
		sb.Append("\aq\x2\x2\x32\x33\at\x2\x2\x33\x6\x3\x2\x2\x2\x34\x35\a>\x2");
		sb.Append("\x2\x35\b\x3\x2\x2\x2\x36\x37\a>\x2\x2\x37\x38\a?\x2\x2\x38");
		sb.Append("\n\x3\x2\x2\x2\x39:\a?\x2\x2:\f\x3\x2\x2\x2;<\a@\x2\x2<=\a?");
		sb.Append("\x2\x2=\xE\x3\x2\x2\x2>?\a@\x2\x2?\x10\x3\x2\x2\x2@\x41\a#\x2");
		sb.Append("\x2\x41\x42\a?\x2\x2\x42\x12\x3\x2\x2\x2\x43\x44\au\x2\x2\x44");
		sb.Append("\x45\av\x2\x2\x45\x46\a\x63\x2\x2\x46G\at\x2\x2GH\av\x2\x2H");
		sb.Append("I\au\x2\x2IJ\a\"\x2\x2JK\ay\x2\x2KL\ak\x2\x2LM\av\x2\x2MN\a");
		sb.Append("j\x2\x2N\x14\x3\x2\x2\x2OP\ag\x2\x2PQ\ap\x2\x2QR\a\x66\x2\x2");
		sb.Append("RS\au\x2\x2ST\a\"\x2\x2TU\ay\x2\x2UV\ak\x2\x2VW\av\x2\x2WX\a");
		sb.Append("j\x2\x2X\x16\x3\x2\x2\x2YZ\a\x65\x2\x2Z[\aq\x2\x2[\\\ap\x2\x2");
		sb.Append("\\]\av\x2\x2]^\a\x63\x2\x2^_\ak\x2\x2_`\ap\x2\x2`\x61\au\x2");
		sb.Append("\x2\x61\x18\x3\x2\x2\x2\x62\x63\ak\x2\x2\x63\x64\ap\x2\x2\x64");
		sb.Append("\x1A\x3\x2\x2\x2\x65\x66\ap\x2\x2\x66g\aq\x2\x2gh\av\x2\x2h");
		sb.Append("i\a\"\x2\x2ij\ak\x2\x2jk\ap\x2\x2k\x1C\x3\x2\x2\x2lm\aj\x2\x2");
		sb.Append("mn\a\x63\x2\x2no\au\x2\x2op\a\"\x2\x2pq\ah\x2\x2qr\an\x2\x2");
		sb.Append("rs\a\x63\x2\x2st\ai\x2\x2t\x1E\x3\x2\x2\x2uv\ak\x2\x2vw\au\x2");
		sb.Append("\x2wx\a\"\x2\x2xy\ap\x2\x2yz\aw\x2\x2z{\an\x2\x2{|\an\x2\x2");
		sb.Append("| \x3\x2\x2\x2}~\ak\x2\x2~\x7F\au\x2\x2\x7F\x80\a\"\x2\x2\x80");
		sb.Append("\x81\ap\x2\x2\x81\x82\aq\x2\x2\x82\x83\av\x2\x2\x83\x84\a\"");
		sb.Append("\x2\x2\x84\x85\ap\x2\x2\x85\x86\aw\x2\x2\x86\x87\an\x2\x2\x87");
		sb.Append("\x88\an\x2\x2\x88\"\x3\x2\x2\x2\x89\x8D\t\x2\x2\x2\x8A\x8C\t");
		sb.Append("\x3\x2\x2\x8B\x8A\x3\x2\x2\x2\x8C\x8F\x3\x2\x2\x2\x8D\x8B\x3");
		sb.Append("\x2\x2\x2\x8D\x8E\x3\x2\x2\x2\x8E$\x3\x2\x2\x2\x8F\x8D\x3\x2");
		sb.Append("\x2\x2\x90\x92\t\x4\x2\x2\x91\x90\x3\x2\x2\x2\x92\x93\x3\x2");
		sb.Append("\x2\x2\x93\x91\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2\x94\x9B\x3\x2");
		sb.Append("\x2\x2\x95\x97\v\x2\x2\x2\x96\x98\t\x4\x2\x2\x97\x96\x3\x2\x2");
		sb.Append("\x2\x98\x99\x3\x2\x2\x2\x99\x97\x3\x2\x2\x2\x99\x9A\x3\x2\x2");
		sb.Append("\x2\x9A\x9C\x3\x2\x2\x2\x9B\x95\x3\x2\x2\x2\x9B\x9C\x3\x2\x2");
		sb.Append("\x2\x9C&\x3\x2\x2\x2\x9D\x9E\a*\x2\x2\x9E(\x3\x2\x2\x2\x9F\xA0");
		sb.Append("\a+\x2\x2\xA0*\x3\x2\x2\x2\xA1\xA3\t\x5\x2\x2\xA2\xA1\x3\x2");
		sb.Append("\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA2\x3\x2\x2\x2\xA4\xA5\x3\x2");
		sb.Append("\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\xA7\b\x16\x2\x2\xA7,\x3\x2\x2");
		sb.Append("\x2\b\x2\x8D\x93\x99\x9B\xA4\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ProgressOnderwijsUtils.FilterLanguage
